lambda function to stop rds aurora cluster:
-----------

import boto3
import os

# List of the target DB Cluster Identifiers to stop
DB_CLUSTER_IDS = [
    'rds-pfs-database-nonprod-auroracluster-0063jcvmvyfl',
    'rds-pfs-stg-database-auroracluster-Omoiovj8pj5x',
    'rds-pfs-database-preprod-auroracluster-bob0jbkdvcei',
    'rds-pfs-database-prod-auroracluster-1nf83uupv3xg'
]

# Get the AWS region from the Lambda environment variables
REGION = os.environ.get('AWS_REGION')

def lambda_handler(event, context):
    """
    Stops the specified RDS Aurora DB clusters.
    """
    rds_client = boto3.client('rds', region_name=REGION)
    
    stopped_clusters = []
    error_clusters = []

    print(f"Starting process to stop RDS clusters: {DB_CLUSTER_IDS}")

    for cluster_id in DB_CLUSTER_IDS:
        try:
            # First, check the cluster's current status
            cluster_info = rds_client.describe_db_clusters(DBClusterIdentifier=cluster_id)
            status = cluster_info['DBClusters'][0]['Status']
            
            if status == 'stopped':
                print(f"Cluster {cluster_id} is already stopped.")
                stopped_clusters.append(f"{cluster_id} (already stopped)")
            elif status == 'available':
                # Only attempt to stop if the cluster is available
                rds_client.stop_db_cluster(DBClusterIdentifier=cluster_id)
                print(f"Successfully initiated stop for DB cluster: {cluster_id}")
                stopped_clusters.append(cluster_id)
            else:
                # Log if the cluster is not in a stoppable state
                print(f"Cluster {cluster_id} is not 'available' (current state: {status}). Cannot stop.")
                error_clusters.append(f"{cluster_id} (state: {status})")

        except Exception as e:
            error_message = f"Error processing cluster {cluster_id}: {str(e)}"
            print(error_message)
            error_clusters.append(f"{cluster_id} (error)")

    print("\n--- Summary ---")
    print(f"Processed successfully: {len(stopped_clusters)}")
    print(f"Encountered errors or non-stoppable states: {len(error_clusters)}")

    return {
        'statusCode': 200,
        'body': {
            'stopped_or_found_stopped': stopped_clusters,
            'errors_or_wrong_state': error_clusters
        }
    }


---------------------------------------------------

cloud formation script to create lambda with other fucntionality:

AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to create a Lambda function with access to Secrets Manager, EventBridge, and CloudWatch Logs.

Parameters:
  GitHubRepo:
    Type: String
  IamBoundaryPolicyName:
    Type: String
    Default: ccoe/js-developer
    AllowedPattern: '[a-zA-Z0-9-\/.]+'
  # ServiceLogGroupRetentionPeriod:
  #   AllowedValues:
  #     - 1
  #     - 3
  #     - 5
  #     - 7
  #     - 14
  #     - 30
  #     - 60
  #     - 90
  #     - 120
  #     - 150
  #     - 180
  #     - 365
  #     - 400
  #     - 545
  #     - 731
  #     - 1827
  #     - 3653
  #   Default: 30
  #   Type: Number
  # BucketName:
  #   AllowedPattern: '[\x20-\x7E]+'
  #   ConstraintDescription: Must be ASCII
  #   MaxLength: 128
  #   MinLength: 2
  #   Type: String
  # BucketFileName:
  #   AllowedPattern: '[\x20-\x7E]+'
  #   ConstraintDescription: Must be ASCII
  #   MaxLength: 128
  #   MinLength: 2
  #   Type: String
  CostcentreTag:
    AllowedPattern: '[\x20-\x7E]+'
    ConstraintDescription: Must be ASCII
    MaxLength: 128
    MinLength: 2
    Type: String
    Default: PD7563
  EnvironmentTag:
    AllowedPattern: '[\x20-\x7E]+'
    ConstraintDescription: Must be ASCII
    MaxLength: 128
    MinLength: 2
    Type: String
    Default: dev
  OwnerTag:
    AllowedPattern: '[\x20-\x7E]+'
    ConstraintDescription: Must be ASCII
    MaxLength: 128
    MinLength: 2
    Type: String
    Default: supply-chain
  ProjectTag:
    AllowedPattern: '[\x20-\x7E]+'
    ConstraintDescription: Must be ASCII
    MaxLength: 128
    MinLength: 2
    Type: String
  LiveTag:
    Type: String
    AllowedValues:
      - "yes"
      - "no"
    Default: "no"
  # LambdaName:
  #   Type: String
  # FunctionMemorySize:
  #   Type: Number
  #   Default: 4096
  # FunctionRuntime:
  #   Type: String
  # FunctionTimeout:
  #   Type: Number
  #   Default: 900
  # FunctionHandler:
  #   Type: String
  # EnvironmentName:
  #   Type: String
  # VpcId:
  #   Type: String
  #   Description: VPC Id
  # Subnets:
  #   Type: List<AWS::EC2::Subnet::Id>
  #   Description: VPC Subnets to run the test into.

# Globals:
#   Function:
#     PermissionsBoundary: !Sub 'arn:aws:iam::${AWS::AccountId}:policy/${IamBoundaryPolicyName}'
#     Tags:
#       costcentre: !Ref 'CostcentreTag'
#       environment: !Ref 'EnvironmentTag'
#       project: !Ref 'ProjectTag'
#       live: !Ref 'LiveTag'

Resources:
  # MyLambdaFunction:
  #   Type: AWS::Lambda::Function
  #   Properties:
  #     Handler: index.handler
  #     Runtime: !Ref FunctionRuntime
  #     Role: !GetAtt LambdaExecutionRole.Arn
  #     Code:
  #       S3: !Ref BucketName
  #       S3Key: !Ref BucketFileName

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - 'arn:aws:iam::aws:policy/AWSLambda_ReadOnlyAccess'
        - 'arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy'
      Policies:
        - PolicyName: SecretAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: SecretAccess
                Action:
                  - secretsmanager:GetSecretValue
                Effect: Allow
                Resource:
                  - !Sub 'arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:*'
        - PolicyName: CloudWatchAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: AccessToCloudWatch
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:CreateLogGroup
                Effect: Allow
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*"
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Condition:
              Bool:
                aws:SecureTransport: 'true'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: '2012-10-17'
      Description: !Sub 'Execution role of Lambda function'
      PermissionsBoundary: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/${IamBoundaryPolicyName}'
      Tags:
        - Key: costcentre
          Value: !Ref 'CostcentreTag'
        - Key: environment
          Value: !Ref 'EnvironmentTag'
        - Key: live
          Value: !Ref 'LiveTag'
        - Key: owner
          Value: !Ref 'OwnerTag'
        - Key: project
          Value: !Ref 'ProjectTag'

---------------------------------

stop-rds-lambda-stack.yaml

AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  CloudFormation stack to create a Lambda function that stops specific RDS Aurora clusters every 7 days.

Parameters:
  IamBoundaryPolicyName:
    Type: String
    Default: ccoe/js-developer
  CostcentreTag:
    Type: String
    Default: PD7563
  EnvironmentTag:
    Type: String
    Default: dev
  OwnerTag:
    Type: String
    Default: supply-chain
  ProjectTag:
    Type: String
  LiveTag:
    Type: String
    AllowedValues:
      - "yes"
      - "no"
    Default: "no"
  LambdaFunctionName:
    Type: String
    Default: stop-grasshopper-rds-clusters
  ScheduleExpression:
    Type: String
    Default: rate(7 days)
    Description: The schedule to trigger the Lambda function (e.g., rate(7 days) or a cron expression).

Resources:
  # MODIFIED: The Lambda execution role now attaches your pre-existing policy.
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - !Sub 'arn:aws:iam::${AWS::AccountId}:policy/LambdaRDSStopPolicy' # ATTACHED your existing policy for RDS permissions
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole' # REPLACED broader policies with just basic logging
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Description: !Sub 'Execution role for the ${LambdaFunctionName} function'
      PermissionsBoundary: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/${IamBoundaryPolicyName}'
      Tags:
        - Key: costcentre
          Value: !Ref 'CostcentreTag'
        - Key: environment
          Value: !Ref 'EnvironmentTag'
        - Key: live
          Value: !Ref 'LiveTag'
        - Key: owner
          Value: !Ref 'OwnerTag'
        - Key: project
          Value: !Ref 'ProjectTag'

  # NEW: The Lambda Function resource, with Python code embedded directly.
  MyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref LambdaFunctionName
      Handler: index.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 60
      Code:
        ZipFile: |
          import boto3
          import os

          # List of the target DB Cluster Identifiers to stop
          DB_CLUSTER_IDS = [
              'rds-pfs-database-nonprod-auroracluster-0063jcvmvyfl',
              'rds-pfs-stg-database-auroracluster-Omoiovj8pj5x',
              'rds-pfs-database-preprod-auroracluster-bob0jbkdvcei',
              'rds-pfs-database-prod-auroracluster-1nf83uupv3xg'
          ]

          # Get the AWS region from the Lambda environment variables
          REGION = os.environ.get('AWS_REGION')

          def lambda_handler(event, context):
              """
              Stops the specified RDS Aurora DB clusters.
              """
              rds_client = boto3.client('rds', region_name=REGION)
              
              stopped_clusters = []
              error_clusters = []

              print(f"Starting process to stop RDS clusters: {DB_CLUSTER_IDS}")

              for cluster_id in DB_CLUSTER_IDS:
                  try:
                      # First, check the cluster's current status
                      cluster_info = rds_client.describe_db_clusters(DBClusterIdentifier=cluster_id)
                      status = cluster_info['DBClusters'][0]['Status']
                      
                      if status == 'stopped':
                          print(f"Cluster {cluster_id} is already stopped.")
                          stopped_clusters.append(f"{cluster_id} (already stopped)")
                      elif status == 'available':
                          # Only attempt to stop if the cluster is available
                          rds_client.stop_db_cluster(DBClusterIdentifier=cluster_id)
                          print(f"Successfully initiated stop for DB cluster: {cluster_id}")
                          stopped_clusters.append(cluster_id)
                      else:
                          # Log if the cluster is not in a stoppable state
                          print(f"Cluster {cluster_id} is not 'available' (current state: {status}). Cannot stop.")
                          error_clusters.append(f"{cluster_id} (state: {status})")

                  except Exception as e:
                      error_message = f"Error processing cluster {cluster_id}: {str(e)}"
                      print(error_message)
                      error_clusters.append(f"{cluster_id} (error)")

              print("\n--- Summary ---")
              print(f"Processed successfully: {len(stopped_clusters)}")
              print(f"Encountered errors or non-stoppable states: {len(error_clusters)}")

              return {
                  'statusCode': 200,
                  'body': {
                      'stopped_or_found_stopped': stopped_clusters,
                      'errors_or_wrong_state': error_clusters
                  }
              }

  # NEW: The EventBridge Rule to schedule the Lambda function.
  EventBridgeRule:
    Type: AWS::Events::Rule
    Properties:
      Description: 'Rule to trigger the RDS stop Lambda function every 7 days'
      Name: 'stop-grasshopper-rds-schedule'
      ScheduleExpression: !Ref ScheduleExpression
      State: ENABLED
      Targets:
        - Arn: !GetAtt MyLambdaFunction.Arn
          Id: 'StopRdsLambdaTarget'

  # NEW: The permission that allows the EventBridge Rule to invoke the Lambda.
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt MyLambdaFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt EventBridgeRule.Arn

----------

